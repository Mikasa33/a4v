import{_ as s,M as i,aw as e,L as t}from"./chunks/framework.BzEVrRrt.js";const k=JSON.parse('{"title":"规范","description":"","frontmatter":{},"headers":[],"relativePath":"guide/project/standard.md","filePath":"guide/project/standard.md","lastUpdated":1727685155000}'),l={name:"guide/project/standard.md"};function n(h,a,p,o,d,c){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="规范" tabindex="-1">规范 <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;规范&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如果你使用的是 <code>vscode</code>，需要安装以下插件：</p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker" target="_blank" rel="noreferrer">Code Spell Checker</a> - 拼写检查</li><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noreferrer">ESLint</a> - 代码检查</li><li><a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint" target="_blank" rel="noreferrer">Stylelint</a> - 样式检查</li></ul></div><p>具备基本工程素养的同学都会注重编码规范，而代码风格检查是保障代码规范一致性的重要手段。</p><p>遵循相应的代码规范有以下好处：</p><ul><li>较少 bug 错误率</li><li>高效的开发效率</li><li>更高的可读性</li></ul><h2 id="commitlint" tabindex="-1">Commitlint <a class="header-anchor" href="#commitlint" aria-label="Permalink to &quot;Commitlint&quot;">​</a></h2><p>在一个团队中，每个人的 git 的 commit 信息都不一样，五花八门，没有一个机制很难保证规范化，如何才能规范化呢？可能你想到的是 git 的 hook 机制，去写 shell 脚本去实现。这当然可以，其实 JavaScript 有一个很好的工具可以实现这个模板，它就是 commitlint（用于校验 git 提交信息规范）。</p><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># 将修改内容添加到暂存区</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">git</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> add</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># 使用 czg 生成标准化的 git commit message 并提交</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">pnpm</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> cz</span></span></code></pre></div><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>commitlint 配置文件为 <code>commitlint.config.cjs</code>，可以根据项目需求进行修改。</p><h3 id="git-提交规范" tabindex="-1">Git 提交规范 <a class="header-anchor" href="#git-提交规范" aria-label="Permalink to &quot;Git 提交规范&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">提交消息的模板</p><p>[type](scope): [emoji] [messages] description</p></div><ul><li><code>feat</code> ✨ 新增功能</li><li><code>fix</code> 🐛 修复缺陷</li><li><code>docs</code> 📝 文档变更</li><li><code>style</code> 💄 代码格式（不影响功能，例如空格、分号等格式修正）</li><li><code>refactor</code> ♻️ 代码重构（不包括 bug 修复、功能新增）</li><li><code>perf</code> ⚡️ 性能优化</li><li><code>test</code> ✅ 添加疏漏测试或已有测试改动</li><li><code>build</code> 📦️ 构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）</li><li><code>ci</code> 🎡 修改 CI 配置、脚本</li><li><code>revert</code> ⏪️ 回滚 commit</li><li><code>chore</code> 🔨 对构建过程或辅助工具和库的更改（不影响源文件、测试用例）</li></ul><h3 id="关闭-git-提交规范检查" tabindex="-1">关闭 Git 提交规范检查 <a class="header-anchor" href="#关闭-git-提交规范检查" aria-label="Permalink to &quot;关闭 Git 提交规范检查&quot;">​</a></h3><p>如果你想关闭 Git 提交规范检查，有两种方式：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-fDojP" id="tab-vigCeon" checked><label data-title="临时关闭" for="tab-vigCeon">临时关闭</label><input type="radio" name="group-fDojP" id="tab-FmNVjoJ"><label data-title="永久关闭" for="tab-FmNVjoJ">永久关闭</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">git</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> commit</span><span style="--shiki-dark:#C99076;--shiki-light:#A65E2B;"> -m</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;"> &#39;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">feat: add home page</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#C99076;--shiki-light:#A65E2B;"> --no-verify</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># 在 .husky/commit-msg 内注释以下代码即可</span></span>
<span class="line diff remove"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">pnpm</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> exec</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> commitlint</span><span style="--shiki-dark:#C99076;--shiki-light:#A65E2B;"> --edit</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;"> &quot;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">$1</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&quot;</span></span></code></pre></div></div></div><h2 id="cspell" tabindex="-1">Cspell <a class="header-anchor" href="#cspell" aria-label="Permalink to &quot;Cspell&quot;">​</a></h2><p>Cspell 是一个用于检查拼写错误的工具，可以检查代码中的拼写错误，避免因为拼写错误导致的 bug。</p><h3 id="命令-1" tabindex="-1">命令 <a class="header-anchor" href="#命令-1" aria-label="Permalink to &quot;命令&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">pnpm</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> cspell</span></span></code></pre></div><h3 id="配置-1" tabindex="-1">配置 <a class="header-anchor" href="#配置-1" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>cspell 配置文件为 <code>cspell.json</code>，可以根据项目需求进行修改。</p><h2 id="eslint" tabindex="-1">ESLint <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;ESLint&quot;">​</a></h2><p>ESLint 是一个代码规范和错误检查工具，用于识别和报告 TypeScript 代码中的语法错误。</p><h3 id="命令-2" tabindex="-1">命令 <a class="header-anchor" href="#命令-2" aria-label="Permalink to &quot;命令&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># 检查代码</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">pnpm</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> eslint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># 检查代码并修复</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">pnpm</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> eslint</span><span style="--shiki-dark:#C99076;--shiki-light:#A65E2B;"> --fix</span></span></code></pre></div><h3 id="配置-2" tabindex="-1">配置 <a class="header-anchor" href="#配置-2" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>eslint 配置文件为 <code>eslint.config.js</code>，可以根据项目需求进行修改。</p><h2 id="git-hook" tabindex="-1">Git Hook <a class="header-anchor" href="#git-hook" aria-label="Permalink to &quot;Git Hook&quot;">​</a></h2><p>git hook 一般结合各种 lint，在 git 提交代码的时候进行代码风格校验，如果校验没通过，则不会进行提交，需要开发者自行修改后再次进行提交。</p><h3 id="husky" tabindex="-1">husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;husky&quot;">​</a></h3><p>有一个问题就是校验会校验全部代码，但是我们只想校验我们自己提交的代码，这个时候就可以使用 husky。</p><p>最有效的解决方案就是将 lint 校验放到本地，常见做法是使用 <code>husky</code> 或者 <code>pre-commit</code> 在本地提交之前先做一次 lint 校验。</p><p>项目在 <code>.husky</code> 内部定义了相应的 hooks。</p><p>如果你想关闭 <code>husky</code>，直接删除 <code>.husky</code> 目录即可。</p><h3 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;lint-staged&quot;">​</a></h3><p>用于自动修复提交文件风格问题，其配置文件为 <code>lint-staged.config.js</code>，可以根据项目需求进行修改。</p><h2 id="stylelint" tabindex="-1">Stylelint <a class="header-anchor" href="#stylelint" aria-label="Permalink to &quot;Stylelint&quot;">​</a></h2><p>Stylelint 用于校验项目内部 css 的风格，加上编辑器的自动修复，可以很好的统一项目内部 css 风格。</p><h3 id="命令-3" tabindex="-1">命令 <a class="header-anchor" href="#命令-3" aria-label="Permalink to &quot;命令&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># 检查样式</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">pnpm</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> stylelint</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># 检查样式并修复</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">pnpm</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> stylelint</span><span style="--shiki-dark:#C99076;--shiki-light:#A65E2B;"> --fix</span></span></code></pre></div><h3 id="配置-3" tabindex="-1">配置 <a class="header-anchor" href="#配置-3" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>stylelint 配置文件为 <code>stylelint.config.js</code>，可以根据项目需求进行修改。</p>`,44)]))}const m=s(l,[["render",n]]);export{k as __pageData,m as default};
