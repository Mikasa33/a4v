import{_ as i,M as a,aw as e,L as t}from"./chunks/framework.BzEVrRrt.js";const c=JSON.parse('{"title":"服务端交互与数据 Mock","description":"","frontmatter":{},"headers":[],"relativePath":"guide/essentials/server.md","filePath":"guide/essentials/server.md","lastUpdated":1728628671000}'),h={name:"guide/essentials/server.md"};function n(l,s,p,k,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="服务端交互与数据-mock" tabindex="-1">服务端交互与数据 Mock <a class="header-anchor" href="#服务端交互与数据-mock" aria-label="Permalink to &quot;服务端交互与数据 Mock&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">说明</p><p>本文档介绍如何在开发环境下使用 Mock 数据和与服务端进行交互，涉及到的技术有：</p><ul><li><a href="https://nitro.unjs.io/" target="_blank" rel="noreferrer">Nitro</a> 轻量级后端服务器，可部署在任何地方，项目用作于 Mock 服务器。</li><li><a href="https://axios-http.com/docs/intro/" target="_blank" rel="noreferrer">axios</a> 用于发送 HTTP 请求与服务端进行交互。</li></ul></div><h2 id="开发环境交互" tabindex="-1">开发环境交互 <a class="header-anchor" href="#开发环境交互" aria-label="Permalink to &quot;开发环境交互&quot;">​</a></h2><p>如果前端应用和后端接口服务器没有运行在同一个主机上，你需要在开发环境下将接口请求代理到接口服务器。如果是同一个主机，可以直接请求具体的接口地址。</p><h3 id="本地开发跨域配置" tabindex="-1">本地开发跨域配置 <a class="header-anchor" href="#本地开发跨域配置" aria-label="Permalink to &quot;本地开发跨域配置&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">提示</p><p>本地开发跨域配置项目已经配置好了，如有其他需求，可以自行增加或者调整配置。</p></div><h4 id="配置本地开发接口地址" tabindex="-1">配置本地开发接口地址 <a class="header-anchor" href="#配置本地开发接口地址" aria-label="Permalink to &quot;配置本地开发接口地址&quot;">​</a></h4><p>在项目根目录下的 <code>.env.development</code> 文件中配置接口地址，这里配置为 <code>/api</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">VITE_API_URL</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">=</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">/api</span></span></code></pre></div><h4 id="配置开发服务器代理" tabindex="-1">配置开发服务器代理 <a class="header-anchor" href="#配置开发服务器代理" aria-label="Permalink to &quot;配置开发服务器代理&quot;">​</a></h4><p>开发环境如果需要处理跨域，接口地址在对应的应用目录下的 <code>vite.config.ts</code> 文件中配置：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes vitesse-dark vitesse-light has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">export</span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;"> default</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;"> defineConfig</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(()</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">  return</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#B8A965;--shiki-light:#998418;">    vite</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: {</span></span>
<span class="line"><span style="--shiki-dark:#B8A965;--shiki-light:#998418;">      server</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: {</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#B8A965;--shiki-light:#998418;">        proxy</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: {</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">          &#39;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">/api</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: {</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#B8A965;--shiki-light:#998418;">            changeOrigin</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: </span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">true</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">,</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">            rewrite</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: (</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">path</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: </span><span style="--shiki-dark:#5DA994;--shiki-light:#2E8F82;">string</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">) =&gt; </span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">path</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">replace</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">/</span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">^</span><span style="--shiki-dark:#E6CC77;--shiki-light:#BDA437;">\\/</span><span style="--shiki-dark:#C4704F;--shiki-light:#AB5E3F;">api</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">/</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">, </span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;&#39;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">),</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#B8A965;--shiki-light:#998418;">            target</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: </span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">http://localhost:7776/api</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">,</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#B8A965;--shiki-light:#998418;">            ws</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">: </span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">true</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">,</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#666666;--shiki-light:#999999;">          },</span></span>
<span class="line highlighted has-focus"><span style="--shiki-dark:#666666;--shiki-light:#999999;">        },</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">      },</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">    },</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">  };</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">});</span></span></code></pre></div><h4 id="接口请求" tabindex="-1">接口请求 <a class="header-anchor" href="#接口请求" aria-label="Permalink to &quot;接口请求&quot;">​</a></h4><p>根据上面的配置，我们可以在前端项目中使用 <code>/api</code> 作为接口请求的前缀，例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;">import</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;"> axios</span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;"> from</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;"> &#39;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">axios</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">axios</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">get</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;">/api/user</span><span style="--shiki-dark:#C98A7D77;--shiki-light:#B5695977;">&#39;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">).</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">then</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">((</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">res</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">)</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#666666;--shiki-light:#999999;"> {</span></span>
<span class="line"><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">  console</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">.</span><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">log</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BD976A;--shiki-light:#B07D48;">res</span><span style="--shiki-dark:#666666;--shiki-light:#999999;">)</span></span>
<span class="line"><span style="--shiki-dark:#666666;--shiki-light:#999999;">})</span></span></code></pre></div><p>此时，请求会被代理到 <code>http://localhost:7776/api/user</code>。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>从浏览器控制台的 Network 看，请求是 <code>http://localhost:7777/api/user</code>, 这是因为 proxy 配置不会改变本地请求的 url。</p></div><h3 id="没有跨域时的配置" tabindex="-1">没有跨域时的配置 <a class="header-anchor" href="#没有跨域时的配置" aria-label="Permalink to &quot;没有跨域时的配置&quot;">​</a></h3><p>如果没有跨域问题，可以直接忽略 <a href="./server.html#配置开发服务器代理">配置开发服务器代理</a> 配置，直接将接口地址设置在 <code>VITE_GLOB_API_URL</code>。</p><p>在项目根目录下的 <code>.env.development</code> 文件中配置接口地址：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">VITE_GLOB_API_URL</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> =</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> https://xxx/api</span></span></code></pre></div><h2 id="生产环境交互" tabindex="-1">生产环境交互 <a class="header-anchor" href="#生产环境交互" aria-label="Permalink to &quot;生产环境交互&quot;">​</a></h2><h3 id="接口地址配置" tabindex="-1">接口地址配置 <a class="header-anchor" href="#接口地址配置" aria-label="Permalink to &quot;接口地址配置&quot;">​</a></h3><p>在项目根目录下的 <code>.env.production</code> 文件中配置接口地址：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">VITE_GLOB_API_URL</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> =</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> https://xxx/api</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">打包如何动态修改接口地址</p><p><code>.env</code> 文件内的 <code>VITE_GLOB_*</code> 开头的变量会在打包的时候注入 <code>_app.config.js</code> 文件内。在 <code>dist/_app.config.js</code> 修改相应的接口地址后刷新页面即可，不需要在根据不同环境打包多次，一次打包可以用于多个不同接口环境的部署。</p></div><h3 id="跨域处理" tabindex="-1">跨域处理 <a class="header-anchor" href="#跨域处理" aria-label="Permalink to &quot;跨域处理&quot;">​</a></h3><p>生产环境如果出现跨域问题，可以使用 <code>nginx</code> 代理接口地址 或者后台开启 <code>cors</code> 进行处理即可（可参考 mock 服务）。</p><h2 id="数据-mock" tabindex="-1">数据 Mock <a class="header-anchor" href="#数据-mock" aria-label="Permalink to &quot;数据 Mock&quot;">​</a></h2><p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发进程所阻塞。</p><p>项目使用 <a href="https://nitro.unjs.io/" target="_blank" rel="noreferrer">Nitro</a> 来进行本地 mock 数据处理。其原理是本地额外启动一个后端服务，是一个真实的后端服务，可以处理请求，返回数据。</p><h3 id="nitro-使用" tabindex="-1">Nitro 使用 <a class="header-anchor" href="#nitro-使用" aria-label="Permalink to &quot;Nitro 使用&quot;">​</a></h3><p>Mock 服务代码位于 <code>apps/mock</code> 目录下，无需手动启动，已经集成在项目中，只需要在项目根目录下运行 <code>pnpm dev</code> 即可，运行成功之后，控制台会打印 <code>http://localhost:7776/api</code>, 访问该地址即可查看 mock 服务。</p><p><a href="https://nitro.unjs.io/" target="_blank" rel="noreferrer">Nitro</a> 语法简单，可以根据自己的需求进行配置及开发，具体配置可以查看 <a href="https://nitro.unjs.io/" target="_blank" rel="noreferrer">Nitro 文档</a>。</p><h2 id="关闭-mock-服务" tabindex="-1">关闭 Mock 服务 <a class="header-anchor" href="#关闭-mock-服务" aria-label="Permalink to &quot;关闭 Mock 服务&quot;">​</a></h2><p>mock 的本质是一个真实的后端服务，如果不需要 mock 服务，可以在项目根目录下的 <code>.env.development</code> 文件中配置 <code>VITE_NITRO_MOCK = false</code> 即可关闭 mock 服务。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-dark vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#758575DD;--shiki-light:#A0ADA0;"># .env.development</span></span>
<span class="line"><span style="--shiki-dark:#80A665;--shiki-light:#59873A;">VITE_NITRO_MOCK</span><span style="--shiki-dark:#C98A7D;--shiki-light:#B56959;"> =</span><span style="--shiki-dark:#4D9375;--shiki-light:#1E754F;"> false</span></span></code></pre></div>`,37)]))}const g=i(h,[["render",n]]);export{c as __pageData,g as default};
